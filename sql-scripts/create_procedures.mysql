delimiter //

CREATE PROCEDURE get_ancestor (
		IN  p_tree       VARCHAR(256),
		IN  p_father     VARCHAR(256),
		IN  p_descendant VARCHAR(256),
		OUT p_ancestor   VARCHAR(256)
	) COMMENT "Parameters: IN <p_tree> VARCHAR(256), IN <p_father> VARCHAR(256), IN <p_descendant> VARCHAR(256), OUT <p_ancestor> MEDIUMINT
                      Description: Find in the tree named <p_tree> a node which is an ancestor of that which is asociated to the description/mime-type <p_descendant> and its father is asociated to the description <p_father>. Store the resulting description in the variable named <p_ancestor>."

BEGIN
	DECLARE v_descendant_left MEDIUMINT;

	IF p_tree = 'file type hierarchy'
	THEN
		SELECT left_extent INTO v_descendant_left
			FROM l_mime_type_to_tree_node AS mime2tree
			INNER JOIN mime_type
				ON mime2tree.mime_type_id = mime_type.id
			INNER JOIN tree_node AS node
				ON mime2tree.tree_node_id = node.id
			WHERE mime_type.type = p_descendant;

		IF v_descendant_left IS NULL
		THEN
			SELECT left_extent INTO v_descendant_left
				FROM l_tree_node_to_description AS node2desc
				INNER JOIN description
					ON node2desc.description_id = description.id
				INNER JOIN tree_node AS node
					ON node2desc.tree_node_id = node.id
				WHERE description.text = p_descendant;
		END IF;
	END IF;
	SELECT text INTO p_ancestor
		FROM l_tree_node_to_tree AS node2tree
		INNER JOIN tree
			ON node2tree.tree_id = tree.id
		INNER JOIN tree_node AS node
			ON node2tree.tree_node_id = node.id
		INNER JOIN l_tree_node_to_description node2desc
			ON node.id = node2desc.tree_node_id
		INNER JOIN description
			ON description.id = node2desc.description_id
		WHERE parent_id = (SELECT tree_node_id
					FROM l_tree_node_to_description AS node2desc
					INNER JOIN description
						ON node2desc.description_id = description.id
					WHERE text = p_father)
		AND tree.name = p_tree
		AND left_extent < v_descendant_left
		AND right_extent > v_descendant_left;
END;

CREATE PROCEDURE insert_and_get_archive_file (
		IN  p_file_id         MEDIUMINT UNSIGNED,
		OUT p_archive_file_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_file_id> MEDIUMINT UNSIGNED, OUT <p_archive_file_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'archive_file' table. Return the id field of the inserted row."

BEGIN
	-- Check if an entry already exists in the table 'archive_file' with the specified file_id. 
	SELECT id INTO p_archive_file_id
		FROM archive_file
		WHERE file_id = p_file_id;
	
	-- If it doesn't exist, create it.
	IF p_archive_file_id IS NULL
	THEN
		INSERT INTO archive_file (id, file_id) VALUES (
			'',
			p_file_id
		);
		SELECT LAST_INSERT_ID() INTO p_archive_file_id;
	END IF;
END;

CREATE PROCEDURE insert_and_get_archive_location (
		IN  p_archive_file_id     MEDIUMINT UNSIGNED,
		IN  p_path_id             MEDIUMINT UNSIGNED,
		OUT p_archive_location_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_archive_file_id> MEDIUMINT UNSIGNED, IN <p_path_id> VARCHAR(256), OUT <p_archive_location_id> MEDIUMINT
                      Description: Insert an entry in the 'location' and 'archive_location' tables. Return the id field of the inserted row in the 'archive_location' table."

BEGIN
	DECLARE v_location_id MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'archive_location' with the specified p_hostname and p_path_id. 
	SELECT archive_location.id INTO p_archive_location_id
		FROM archive_location
		WHERE archive_file_id = p_archive_file_id
		AND path_id = p_path_id;

	-- If it doesn't exist, create it.
	IF p_archive_location_id IS NULL
	THEN
		INSERT INTO location (id) VALUES ('') ;
		SELECT LAST_INSERT_ID() INTO v_location_id;

		INSERT INTO archive_location (id, location_id, archive_file_id, path_id) VALUES (
			'',
			v_location_id,
			p_archive_file_id,
			p_path_id
		);
		SELECT LAST_INSERT_ID() INTO p_archive_location_id;
	END IF;
END;

CREATE PROCEDURE insert_and_get_audio_file (
		IN  p_file_id       MEDIUMINT UNSIGNED,
		IN  p_recording_gid CHAR(36),
		OUT p_audio_file_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_file_id> MEDIUMINT UNSIGNED, IN <p_recording_gid> CHAR(36), OUT <p_audio_file_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'file', 'location', 'host_location' and 'l_file_to_location' tables. Return the id field of the inserted row in the 'file' table."

BEGIN
	DECLARE v_recording_id MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'audio_file' with the specified file_id. 
	SELECT id INTO p_audio_file_id
		FROM audio_file
		WHERE file_id = p_file_id
	;
	
	-- If it doesn't exist, create it.
	IF p_audio_file_id IS NULL
	THEN
		INSERT INTO audio_file (id, file_id) VALUES (
			'',
			p_file_id
		);
		SELECT LAST_INSERT_ID() INTO p_audio_file_id;
	END IF;

	IF p_recording_gid IS NOT NULL
	THEN
		CALL insert_and_get_recording (p_recording_gid, NULL, NULL, v_recording_id);

		CALL link_audio_file_to_recording (p_audio_file_id, v_recording_id);
	END IF;

END;

CREATE PROCEDURE insert_and_get_file (
		IN  p_hostname VARCHAR(256),
		IN  p_pathname VARCHAR(256),
		IN  p_mimetype VARCHAR(256),
		IN  p_sha1     CHAR(40),
		IN  p_fsize    BIGINT UNSIGNED,
		IN  p_mtime    INT UNSIGNED,
		OUT p_file_id  MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_hostname> VARCHAR(256), IN <p_pathname> VARCHAR(256), IN p_mimetype VARCHAR(256), IN p_sha1 CHAR(40), IN p_fsize BIGINT UNSIGNED, IN p_mtime INT UNSIGNED, OUT <p_file_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'file', 'location', 'host_location' and 'l_file_to_location' tables. Return the id field of the inserted row in the 'file' table."

BEGIN
	DECLARE v_host_location_id MEDIUMINT UNSIGNED;

	CALL insert_and_get_host_location (p_hostname, p_pathname, v_host_location_id);
	
	-- Check if an entry already exists in the table 'file' with the specified p_sha1. 
	SELECT id INTO p_file_id
		FROM file
		WHERE sha1 = p_sha1;
	
	-- If it doesn't exist, create it.
	IF p_file_id IS NULL
	THEN
		INSERT INTO file (mime_type_id, sha1, fsize, mtime) VALUES (
			(SELECT id FROM mime_type WHERE type = p_mimetype),
			p_sha1,
			p_fsize,
			p_mtime
		);
		SELECT LAST_INSERT_ID() INTO p_file_id;
	END IF;

END;

CREATE PROCEDURE insert_and_get_flac_file (
		IN  p_audio_file_id MEDIUMINT UNSIGNED,
		OUT p_flac_file_id  MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_audio_file_id> MEDIUMINT UNSIGNED, OUT <p_flac_file_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'flac_file' table. Return the id field of the inserted row."

BEGIN
	-- Check if an entry already exists in the table 'flac_file' with the specified audio_file_id. 
	SELECT id INTO p_flac_file_id
		FROM flac_file
		WHERE audio_file_id = p_audio_file_id;
	
	-- If it doesn't exist, create it.
	IF p_flac_file_id IS NULL
	THEN
		INSERT INTO flac_file (id, audio_file_id) VALUES (
			'',
			p_audio_file_id
		);
		SELECT LAST_INSERT_ID() INTO p_flac_file_id;
	END IF;
END;

CREATE PROCEDURE insert_and_get_flac_metadata_block (
		IN  p_flac_file_id           MEDIUMINT UNSIGNED,
		IN  p_label                  VARCHAR(256),
		OUT p_flac_metadata_block_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_flac_file_id> MEDIUMINT UNSIGNED, OUT <p_flac_metadata_block_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'flac_metadata_block' table. Return the id field of the inserted row."

BEGIN
	INSERT INTO flac_metadata_block (id, label) VALUES ('', p_label);
	SELECT LAST_INSERT_ID() INTO p_flac_metadata_block_id;

	CALL link_flac_file_to_metadata_block (p_flac_file_id, p_flac_metadata_block_id);
END;

CREATE PROCEDURE insert_and_get_flac_metadata_entry (
		IN  p_flac_metadata_block_id MEDIUMINT UNSIGNED,
		OUT p_flac_metadata_entry_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_flac_metadata_block_id> MEDIUMINT UNSIGNED, OUT <p_flac_metadata_entry_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'flac_metadata_entry' table. Return the id field of the inserted row."

BEGIN
	INSERT INTO flac_metadata_entry (id) VALUES ('');
	SELECT LAST_INSERT_ID() INTO p_flac_metadata_entry_id;

	CALL link_flac_metadata_entry_to_block (p_flac_metadata_entry_id, p_flac_metadata_block_id);
END;

CREATE PROCEDURE insert_and_get_host (
		IN  p_name    VARCHAR(256),
		OUT p_host_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_name> MEDIUMINT UNSIGNED, OUT <p_host_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'host' table. Return the id field of the inserted row."

BEGIN
	-- Check if an entry already exists in the table 'host' with the specified name. 
	SELECT id INTO p_host_id FROM host WHERE name = p_name;
	
	-- If it doesn't exist, create it.
	IF p_host_id IS NULL
	THEN
		INSERT INTO host (id, name) VALUES ( '', p_name);
		SELECT LAST_INSERT_ID() INTO p_host_id;
	END IF;
END;

CREATE PROCEDURE insert_and_get_host_location (
		IN  p_hostname         VARCHAR(256),
		IN  p_pathname         VARCHAR(256),
		OUT p_host_location_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_hostname> VARCHAR(256), IN <p_pathname> VARCHAR(256), OUT <p_host_location_id> MEDIUMINT
                      Description: Insert an entry in the 'location' and 'host_location' tables. Return the id field of the inserted row in the 'host_location' table."

BEGIN
	DECLARE v_host_id     MEDIUMINT UNSIGNED;
	DECLARE v_path_id     MEDIUMINT UNSIGNED;
	DECLARE v_location_id MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'host_location' with the specified p_hostname and p_pathname. 
	SELECT host_location.id INTO p_host_location_id
		FROM host_location
		INNER JOIN host ON host_location.host_id = host.id
		INNER JOIN path ON host_location.path_id = path.id
		WHERE host.name = p_hostname
		AND path.name = p_pathname;

	-- If it doesn't exist, create it.
	IF p_host_location_id IS NULL
	THEN
		CALL insert_and_get_host (p_hostname, v_host_id);
		CALL insert_and_get_path (p_pathname, v_path_id);

		INSERT INTO location (id) VALUES ('');
		SET v_location_id = LAST_INSERT_ID();

		INSERT INTO host_location (id, location_id, host_id, path_id) VALUES (
			'',
			v_location_id,
			v_host_id,
			v_path_id
		);
		SET p_host_location_id = LAST_INSERT_ID();
	END IF;
END;

CREATE PROCEDURE insert_and_get_path (
		IN  p_name    VARCHAR(256),
		OUT p_path_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_name> MEDIUMINT UNSIGNED, OUT <p_path_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'path' table. Return the id field of the inserted row."

BEGIN
	-- Check if an entry already exists in the table 'path' with the specified name. 
	SELECT id INTO p_path_id FROM path WHERE name = p_name;
	
	-- If it doesn't exist, create it.
	IF p_path_id IS NULL
	THEN
		INSERT INTO path (id, name) VALUES ( '', p_name);
		SELECT LAST_INSERT_ID() INTO p_path_id;
	END IF;
END;

CREATE PROCEDURE insert_and_get_recording (
		IN  p_gid              CHAR(36),
		IN  p_track_name_id    MEDIUMINT UNSIGNED,
		IN  p_artist_credit_id MEDIUMINT UNSIGNED,
		OUT p_recording_id     MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_gid> CHAR(36), IN <p_track_name_id> MEDIUMINT, IN <p_artist_credit_id> MEDIUMINT, OUT <p_recording_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'recording' table. Return the id field of the inserted row."

BEGIN

	-- Check if an entry already exists in the table 'recording' with the specified p_gid. 
	SELECT recording.id INTO p_recording_id
		FROM recording
		WHERE recording.gid = p_gid
	;

	-- If it doesn't exist, create it.
	IF p_recording_id IS NULL
	THEN
		INSERT INTO recording (id, gid, track_name_id, artist_credit_id) VALUES (
			'',
			p_gid,
			p_track_name_id,
			p_artist_credit_id
		);
		SELECT LAST_INSERT_ID() INTO p_recording_id;
	END IF;
END;

CREATE PROCEDURE insert_archive_file (
		IN p_file_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_file_id> MEDIUMINT UNSIGNED, OUT <p_archive_file_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'archive_file' table."

BEGIN
	DECLARE v_archive_file_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_archive_file (p_file_id, v_archive_file_id);
END;

CREATE PROCEDURE insert_archive_location (
		IN  p_archive_file_id MEDIUMINT UNSIGNED,
		IN  p_path_id         MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_archive_file_id> MEDIUMINT UNSIGNED, IN <p_path_id> VARCHAR(256), OUT <p_archive_location_id> MEDIUMINT
                      Description: Insert an entry in the 'location' and 'archive_location' tables."

BEGIN
	DECLARE v_archive_location_id MEDIUMINT;
	CALL insert_and_get_archive_location (p_hostname, p_pathname, v_host_location_id);
END;

CREATE PROCEDURE insert_audio_file (
		IN  p_file_id       MEDIUMINT UNSIGNED,
		IN  p_recording_gid CHAR(36)
	) COMMENT "Parameters: IN <p_file_id> MEDIUMINT UNSIGNED, IN <p_recording_gid> CHAR(36).
                      Description: Insert an entry in the 'audio_file', 'recording' and 'l_audio_file_to_recording' tables."

BEGIN
	DECLARE v_audio_file_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_audio_file (p_file_id, p_recording_gid, v_audio_file_id);
END;

CREATE PROCEDURE insert_flac_file (
		IN p_audio_file_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_audio_file_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'flac_file' table."

BEGIN
	DECLARE v_flac_file_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_flac_file (p_audio_file_id, v_flac_file_id);
END;

CREATE PROCEDURE insert_flac_metadata_block (
		IN p_flac_file_id MEDIUMINT UNSIGNED,
		IN p_label VARCHAR(256)
	) COMMENT "Parameters: IN <p_flac_file_id> MEDIUMINT UNSIGNED, IN <p_label> VARCHAR(256).
                      Description: Insert an entry in the 'recording' table."

BEGIN
	DECLARE v_flac_metadata_block_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_flac_metadata_block (p_flac_file_id, p_label, v_flac_metadata_block_id);
END;

CREATE PROCEDURE insert_flac_streaminfo_metadata_entry (
		IN p_flac_file_id MEDIUMINT UNSIGNED,
		IN p_column1      VARCHAR(256),
		IN p_column2      VARCHAR(256)
	) COMMENT "Parameters: IN <p_flac_file_id> MEDIUMINT UNSIGNED, IN <p_column1> VARCHAR(256), IN <p_column2> VARCHAR(256).
                      Description: Insert an entry in the 'flac_streaminfo_metadata_entry' table."

BEGIN
	DECLARE v_flac_metadata_block_id MEDIUMINT UNSIGNED;
	DECLARE v_flac_metadata_entry_id MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_flac_file_to_metadata_block' with the specified p_flac_file_id. 
	SELECT flac_metadata_block_id INTO v_flac_metadata_block_id
		FROM l_flac_file_to_metadata_block AS file2block
		INNER JOIN flac_metadata_block AS block
			ON file2block.flac_metadata_block_id = block.id
		WHERE block.label = 'streaminfo';
	
	-- If it doesn't exist, create it.
	IF v_flac_metadata_block_id IS NULL
	THEN
		CALL insert_and_get_flac_metadata_block (p_flac_file_id, 'streaminfo', v_flac_metadata_block_id);
	END IF;
	
	-- Create an entry in the 'flac_metadata_entry' table.
	CALL insert_and_get_flac_metadata_entry (v_flac_metadata_block_id, v_flac_metadata_entry_id);

	-- Finally, create an entry in the 'flac_streaminfo_metadata_entry' table.
	INSERT INTO flac_streaminfo_metadata_entry (flac_metadata_entry_id, column1, column2) VALUES (
		v_flac_metadata_entry_id,
		p_column1,
		p_column2
	);
END;

CREATE PROCEDURE insert_flac_vorbiscomment_metadata_entry (
		IN p_flac_file_id MEDIUMINT UNSIGNED,
		IN p_column1      VARCHAR(256),
		IN p_column2      VARCHAR(256)
	) COMMENT "Parameters: IN <p_flac_file_id> MEDIUMINT UNSIGNED, IN <p_column1> VARCHAR(256), IN <p_column2> VARCHAR(256).
                      Description: Insert an entry in the 'flac_vorbiscomment_metadata_entry' table."

BEGIN
	DECLARE v_flac_metadata_block_id MEDIUMINT UNSIGNED;
	DECLARE v_flac_metadata_entry_id MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_flac_file_to_metadata_block' with the specified p_flac_file_id. 
	SELECT flac_metadata_block_id INTO v_flac_metadata_block_id
		FROM l_flac_file_to_metadata_block AS file2block
		INNER JOIN flac_metadata_block AS block
			ON file2block.flac_metadata_block_id = block.id
		WHERE block.label = 'vorbiscomment';
	
	-- If it doesn't exist, create it.
	IF v_flac_metadata_block_id IS NULL
	THEN
		CALL insert_and_get_flac_metadata_block (p_flac_file_id, 'vorbiscomment', v_flac_metadata_block_id);
	END IF;
	
	-- Create an entry in the 'flac_metadata_entry' table.
	CALL insert_and_get_flac_metadata_entry (v_flac_metadata_block_id, v_flac_metadata_entry_id);

	-- Finally, create an entry in the 'flac_vorbiscomment_metadata_entry' table.
	INSERT INTO flac_vorbiscomment_metadata_entry (flac_metadata_entry_id, column1, column2) VALUES (
		v_flac_metadata_entry_id,
		p_column1,
		p_column2
	);
END;

CREATE PROCEDURE insert_host_location (
		IN  p_hostname VARCHAR(256),
		IN  p_pathname VARCHAR(256)
	) COMMENT "Parameters: IN <p_hostname> VARCHAR(256), IN <p_pathname> VARCHAR(256)
                      Description: Insert an entry in the 'location' and 'host_location' tables."

BEGIN
	DECLARE v_host_location_id MEDIUMINT;
	CALL insert_and_get_host_location (p_hostname, p_pathname, v_host_location_id);
END;

CREATE PROCEDURE link_audio_file_to_recording (
		IN p_audio_file_id MEDIUMINT UNSIGNED,
		IN p_recording_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_audio_file_id> MEDIUMINT UNSIGNED, IN <p_recording_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'l_audio_file_to_recording' table."

BEGIN
	DECLARE v_count MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_audio_file_to_recording' with the specified p_audio_file_id and p_recording_id. 
	SELECT COUNT(*) INTO v_count
		FROM l_audio_file_to_recording
		WHERE audio_file_id = p_audio_file_id
		AND recording_id = p_recording_id;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		INSERT INTO l_audio_file_to_recording (audio_file_id, recording_id) VALUES ( 
			p_audio_file_id,
			p_recording_id
		);
	END IF;
END;

CREATE PROCEDURE link_file_to_location (
		IN p_file_id     MEDIUMINT UNSIGNED,
		IN p_location_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_file_id> MEDIUMINT UNSIGNED, IN <p_location_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'l_file_to_location' table."

BEGIN
	DECLARE v_count MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_file_to_location' with the specified p_file_id and p_location_id. 
	SELECT COUNT(*) INTO v_count
		FROM l_file_to_location
		WHERE file_id = p_file_id
		AND location_id = p_location_id;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		INSERT INTO l_file_to_location (file_id, location_id) VALUES ( 
			p_file_id,
			p_location_id
		);
	END IF;
END;

CREATE PROCEDURE link_flac_file_to_metadata_block (
		IN p_flac_file_id MEDIUMINT UNSIGNED,
		IN p_flac_metadata_block_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_flac_file_id> MEDIUMINT UNSIGNED, IN <p_flac_metadata_block_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'l_audio_file_to_recording' table."

BEGIN
	DECLARE v_count MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_flac_file_to_metadata_block' with the specified p_flac_file_id and p_flac_metadata_block_id. 
	SELECT COUNT(*) INTO v_count
		FROM l_flac_file_to_metadata_block
		WHERE flac_file_id = p_flac_file_id
		AND flac_metadata_block_id = p_flac_metadata_block_id;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		INSERT INTO l_flac_file_to_metadata_block (flac_file_id, flac_metadata_block_id) VALUES ( 
			p_flac_file_id,
			p_flac_metadata_block_id
		);
	END IF;
END;

CREATE PROCEDURE link_flac_metadata_entry_to_block (
		IN p_flac_metadata_entry_id MEDIUMINT UNSIGNED,
		IN p_flac_metadata_block_id MEDIUMINT UNSIGNED
	) COMMENT "Parameters: IN <p_flac_metadata_entry_id> MEDIUMINT UNSIGNED, IN <p_flac_metadata_block_id> MEDIUMINT UNSIGNED.
                      Description: Insert an entry in the 'l_flac_metadata_entry_to_block' table."

BEGIN
	INSERT INTO l_flac_metadata_entry_to_block (flac_metadata_entry_id, flac_metadata_block_id) VALUES ( 
		p_flac_metadata_entry_id,
		p_flac_metadata_block_id
	);
END;

CREATE PROCEDURE process_archived_file (
		IN p_archive_sha1 CHAR(40),
		IN p_file_sha1    CHAR(40),
		IN p_pathname     VARCHAR(256)
	) COMMENT "Parameters: IN <p_archive_sha1> CHAR(40), IN <p_file_sha1> CHAR(40), IN <p_pathname> VARCHAR(256).
                      Description: Process a file that it is being archived inside another file, and do the pertinent insertions."

BEGIN
	DECLARE v_archive_file_id     MEDIUMINT UNSIGNED;
	DECLARE v_archive_location_id MEDIUMINT UNSIGNED;
	DECLARE v_file_id             MEDIUMINT UNSIGNED;
	DECLARE v_location_id         MEDIUMINT UNSIGNED;
	DECLARE v_path_id             MEDIUMINT UNSIGNED;

	-- Insert an entry in the 'path' table.
	CALL insert_and_get_path (p_pathname, v_path_id);

	-- Insert an entry in the 'archive_location' table.
	SELECT archive_file.id INTO v_archive_file_id
		FROM archive_file
		INNER JOIN file
			ON archive_file.file_id = file.id
		WHERE file.sha1 = p_archive_sha1
	;
	CALL insert_and_get_archive_location (v_archive_file_id, v_path_id, v_archive_location_id);

	-- Insert and entry in the 'l_file_to_location' table.
	SELECT id INTO v_file_id
		FROM file
		WHERE sha1 = p_file_sha1
	;
	SELECT location_id INTO v_location_id
		FROM archive_location
		WHERE id = v_archive_location_id
	;
	CALL link_file_to_location (v_file_id, v_location_id);
END;

CREATE PROCEDURE process_file (
		IN  p_hostname VARCHAR(256),
		IN  p_pathname VARCHAR(256),
		IN  p_mimetype VARCHAR(256),
		IN  p_sha1     CHAR(40),
		IN  p_fsize    BIGINT UNSIGNED,
		IN  p_mtime    INT UNSIGNED
	) COMMENT "Parameters: IN <p_hostname> VARCHAR(256), IN <p_pathname> VARCHAR(256), IN p_mimetype VARCHAR(256), IN p_sha1 CHAR(40), IN p_fsize BIGINT UNSIGNED, IN p_mtime INT UNSIGNED.
                      Description: Process file's metadata and do the pertinent insertions."

BEGIN
	DECLARE v_host_location_id MEDIUMINT UNSIGNED;
	DECLARE v_file_id          MEDIUMINT UNSIGNED;
	DECLARE v_location_id      MEDIUMINT UNSIGNED;

	CALL insert_and_get_host_location (p_hostname, p_pathname, v_host_location_id);
	SELECT location_id INTO v_location_id
		FROM host_location
		WHERE id = v_host_location_id;
	CALL insert_and_get_file (p_hostname, p_pathname, p_mimetype, p_sha1, p_fsize, p_mtime, v_file_id);
	CALL link_file_to_location (v_file_id, v_location_id);
END;

CREATE PROCEDURE select_ancestor (
		IN p_tree       VARCHAR(256),
		IN p_father     VARCHAR(256),
		IN p_descendant VARCHAR(256)
	) COMMENT "Parameters: IN <p_tree> VARCHAR(256), IN <p_father> VARCHAR(256), IN <p_descendant> VARCHAR(256)
                      Description: Select from the tree named <p_tree> a node which is an ancestor of that which is asociated to the description/mime-type <p_descendant> and its father is asociated to the description <p_father>."

BEGIN
	DECLARE v_ancestor VARCHAR(256);
	CALL get_ancestor (p_tree, p_father, p_descendant, v_ancestor);
	SELECT v_ancestor;
END;

//

delimiter ;

delimiter //

CREATE TEMPORARY TABLE procedures
(
	id      MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
	name	VARCHAR(256) NOT NULL,
	level	VARCHAR(256) NOT NULL,
	PRIMARY KEY (id)
) //

DROP PROCEDURE IF EXISTS get_ancestor //

CREATE PROCEDURE get_ancestor -- {{{1
	(
		IN  p_tree       VARCHAR(256),
		IN  p_father     VARCHAR(256),
		IN  p_descendant VARCHAR(256),
		OUT p_ancestor   VARCHAR(256)
	)

COMMENT -- {{{2
                     "Parameters: 
                        IN  <p_tree>       VARCHAR(256),
                        IN  <p_father>     VARCHAR(256),
                        IN  <p_descendant> VARCHAR(256),
                        OUT <p_ancestor>   MEDIUMINT.
                      Description:
                        Find in the tree named <p_tree> a node which is a child of that asociated to the tag or mime_type <p_father> and, if it 
                        is not asociated to the tag or mime-type <p_descendant>, is and ancestor of one that it is. Store the tag 
                        asociated to the found node in the variable named <p_ancestor>." -- 2}}}

BEGIN -- {{{2
	DECLARE v_descendant_left MEDIUMINT;

	IF p_tree = 'file type hierarchy'
	THEN
		SELECT left_extent INTO v_descendant_left
			FROM l_mime_type_to_tree_node AS mime2tree
			INNER JOIN mime_type
				ON mime2tree.mime_type_id = mime_type.id
			INNER JOIN tree_node AS node
				ON mime2tree.tree_node_id = node.id
			WHERE mime_type.type_descriptor = p_descendant;

		IF v_descendant_left IS NULL
		THEN
			SELECT left_extent INTO v_descendant_left
				FROM l_tree_node_to_tag AS node2desc
				INNER JOIN tag
					ON node2desc.tag_id = tag.id
				INNER JOIN tree_node AS node
					ON node2desc.tree_node_id = node.id
				WHERE tag.text = p_descendant;
		END IF;
	END IF;
	SELECT text INTO p_ancestor
		FROM l_tree_node_to_tree AS node2tree
		INNER JOIN tree
			ON node2tree.tree_id = tree.id
		INNER JOIN tree_node AS node
			ON node2tree.tree_node_id = node.id
		INNER JOIN l_tree_node_to_tag node2desc
			ON node.id = node2desc.tree_node_id
		INNER JOIN tag
			ON tag.id = node2desc.tag_id
		WHERE parent_id = (SELECT tree_node_id
					FROM l_tree_node_to_tag AS node2desc
					INNER JOIN tag
						ON node2desc.tag_id = tag.id
					WHERE text = p_father)
		AND tree.name = p_tree
		AND left_extent <= v_descendant_left
		AND right_extent >= v_descendant_left;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'get_ancestor',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_archive_file //

CREATE PROCEDURE insert_and_get_archive_file -- {{{1

	(
		IN  p_file_id         MEDIUMINT UNSIGNED,
		OUT p_archive_file_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_file_id>         MEDIUMINT UNSIGNED,
                        OUT <p_archive_file_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'archive_file' table. Return the id field of the inserted row." -- 2}}}

BEGIN -- {{{2
	-- Check if an entry already exists in the table 'archive_file' with the specified file_id. 
	SELECT id INTO p_archive_file_id
		FROM archive_file
		WHERE file_id = p_file_id;
	
	-- If it doesn't exist, create it.
	IF p_archive_file_id IS NULL
	THEN
		INSERT INTO archive_file (id, file_id) VALUES (
			'',
			p_file_id
		);
		SELECT LAST_INSERT_ID() INTO p_archive_file_id;
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_archive_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_archive_location //

CREATE PROCEDURE insert_and_get_archive_location -- {{{1

	(
		IN  p_archive_file_id     MEDIUMINT UNSIGNED,
		IN  p_pathname            VARCHAR(256),
		OUT p_archive_location_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_archive_file_id>     MEDIUMINT UNSIGNED,
                        IN  <p_pathname>            VARCHAR(256),
                        OUT <p_archive_location_id> MEDIUMINT.
                      Description:
                        Insert an entry in the 'location' and 'archive_location' tables. Return the id field of the inserted row in the 
                        'archive_location' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_location_id MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'archive_location' with the specified p_hostname and p_pathname. 
	SELECT archive_location.id INTO p_archive_location_id
		FROM archive_location
		WHERE archive_file_id = p_archive_file_id
		AND pathname = p_pathname;

	-- If it doesn't exist, create it.
	IF p_archive_location_id IS NULL
	THEN
		INSERT INTO location (id) VALUES ('');
		SELECT LAST_INSERT_ID() INTO v_location_id;

		INSERT INTO archive_location (id, location_id, archive_file_id, pathname) VALUES (
			'',
			v_location_id,
			p_archive_file_id,
			p_pathname
		);
		SELECT LAST_INSERT_ID() INTO p_archive_location_id;
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_archive_location',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_audio_file //

CREATE PROCEDURE insert_and_get_audio_file -- {{{1

	(
		IN  p_file_id       MEDIUMINT UNSIGNED,
		IN  p_recording_gid CHAR(36),
		OUT p_audio_file_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_file_id>       MEDIUMINT UNSIGNED,
                        IN  <p_recording_gid> CHAR(36),
                        OUT <p_audio_file_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'file', 'location', 'host_location' and 'l_file_to_location' tables. Return the id field of the inserted
                        row in the 'file' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_recording_id MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'audio_file' with the specified file_id. 
	SELECT id INTO p_audio_file_id
		FROM audio_file
		WHERE file_id = p_file_id
	;
	
	-- If it doesn't exist, create it.
	IF p_audio_file_id IS NULL
	THEN
		INSERT INTO audio_file (id, file_id) VALUES (
			'',
			p_file_id
		);
		SELECT LAST_INSERT_ID() INTO p_audio_file_id;
	END IF;

	IF p_recording_gid IS NOT NULL
	THEN
		CALL insert_and_get_recording (p_recording_gid, NULL, NULL, v_recording_id);

		CALL link_audio_file_to_recording (p_audio_file_id, v_recording_id);
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_audio_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_binary_file //

CREATE PROCEDURE insert_and_get_binary_file -- {{{1

	(
		IN  p_file_id        MEDIUMINT UNSIGNED,
		OUT p_binary_file_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_file_id>        MEDIUMINT UNSIGNED,
                        OUT <p_binary_file_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'binary_file' table. Return the id field of the inserted row." -- 2}}}

BEGIN -- {{{2
	-- Check if an entry already exists in the table 'binary_file' with the specified file_id. 
	SELECT id INTO p_binary_file_id
		FROM binary_file
		WHERE file_id = p_file_id;
	
	-- If it doesn't exist, create it.
	IF p_binary_file_id IS NULL
	THEN
		INSERT INTO binary_file (id, file_id) VALUES (
			'',
			p_file_id
		);
		SELECT LAST_INSERT_ID() INTO p_binary_file_id;
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_binary_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_dvd //

CREATE PROCEDURE insert_and_get_dvd -- {{{1

	(
		IN  p_dvd_type_id MEDIUMINT UNSIGNED,
		OUT p_dvd_id      MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_dvd_type_id> MEDIUMINT UNSIGNED,
                        OUT <p_dvd_id>      MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'dvd', 'digital media', 'data storage device'. Return the id field of the inserted row in the 'dvd' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_data_storage_device_id MEDIUMINT UNSIGNED;
	DECLARE v_digital_media_id       MEDIUMINT UNSIGNED;
	DECLARE v_dvd_id                 MEDIUMINT UNSIGNED;

	INSERT INTO data_storage_device (id) VALUES ('');
	SELECT LAST_INSERT_ID() INTO v_data_storage_device_id;

	INSERT INTO digital_media (id, data_storage_device_id) VALUES (
		'',
		v_data_storage_device_id
	);
	SELECT LAST_INSERT_ID() INTO v_digital_media_id;

	SELECT COALESCE(MAX(id), 0) + 1 FROM dvd INTO p_dvd_id;
	INSERT INTO dvd (id, digital_media_id, dvd_type_id) VALUES (
		p_dvd_id,
		v_digital_media_id,
		p_dvd_type_id
	);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_dvd',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_file //

CREATE PROCEDURE insert_and_get_file  -- {{{1

	(
		IN  p_fs_uuid   VARCHAR(256),
		IN  p_pathname  VARCHAR(256),
		IN  p_mime_type VARCHAR(256),
		IN  p_sha1      CHAR(40),
		IN  p_fsize     BIGINT UNSIGNED,
		IN  p_mtime     INT UNSIGNED,
		OUT p_file_id   MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_fs_uuid>  VARCHAR(256),
                        IN  <p_pathname> VARCHAR(256),
                        IN  <p_mime_type> VARCHAR(256),
                        IN  <p_sha1>     CHAR(40),
                        IN  <p_fsize>    BIGINT UNSIGNED,
                        IN  <p_mtime>    INT UNSIGNED,
                        OUT <p_file_id>  MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'file', 'location', 'file_system_location' and 'l_file_to_location' tables. Return the id field of the 
                        inserted row in the 'file' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_count                   MEDIUMINT UNSIGNED;
	DECLARE v_file_system_location_id MEDIUMINT UNSIGNED;
	DECLARE v_location_id             MEDIUMINT UNSIGNED;
	DECLARE v_mime_type_id            MEDIUMINT UNSIGNED;

	CALL insert_and_get_file_system_location (p_fs_uuid, p_pathname, v_file_system_location_id);

	SELECT location.id INTO v_location_id
		FROM location
		INNER JOIN file_system_location AS fs_location
			ON fs_location.location_id = location.id
		WHERE fs_location.id = v_file_system_location_id
	;
	
	-- Check if an entry already exists in the table 'file' with the specified p_sha1. 
	SELECT id INTO p_file_id
		FROM file
		WHERE sha1 = p_sha1;
	
	-- If it doesn't exist, create it.
	IF p_file_id IS NULL
	THEN
		CALL insert_and_get_mime_type (p_mime_type, v_mime_type_id);
		INSERT INTO file (mime_type_id, sha1, fsize, mtime) VALUES (
			v_mime_type_id,
			p_sha1,
			p_fsize,
			p_mtime
		);
		SELECT LAST_INSERT_ID() INTO p_file_id;
	END IF;

	-- Check if an entry already exists in the table 'l_file_to_location' that is related to v_file_id and v_file_system_location_id.
	SELECT COUNT(*) INTO v_count
		FROM l_file_to_location AS link
		INNER JOIN location
			ON link.location_id = v_location_id
		WHERE link.file_id = p_file_id
		AND   location.id = v_location_id
	;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		CALL link_file_to_location (p_file_id, v_location_id);
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_file_system //

CREATE PROCEDURE insert_and_get_file_system -- {{{1

	(
		IN  p_uuid           CHAR(36),
		OUT p_file_system_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_uuid>           CHAR(36),
                        OUT <p_file_system_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry into the 'file_system' table. Return the id field of the inserted row in the 'file_system' table." -- 2}}}

BEGIN -- {{{2

	-- Check if an entry already exists in the table 'file_system' with the specified p_uuid. 
	SELECT id INTO p_file_system_id
		FROM file_system
		WHERE uuid = p_uuid;
	
	-- If it doesn't exist, create it.
	IF p_file_system_id IS NULL
	THEN
		INSERT INTO file_system (uuid) VALUES (p_uuid);
		SELECT LAST_INSERT_ID() INTO p_file_system_id;
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_file_system',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_file_system_location //

CREATE PROCEDURE insert_and_get_file_system_location -- {{{1

	(
		IN  p_uuid                    CHAR(36),
		IN  p_pathname                VARCHAR(256),
		OUT p_file_system_location_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_uuid>                    CHAR(36),
                        IN  <p_pathname>                VARCHAR(256),
                        OUT <p_file_system_location_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry into the 'file_system_location' and 'location' tables. Return the id field of the inserted row in the 
                        'file_system_location' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_location_id    MEDIUMINT UNSIGNED;
	DECLARE v_file_system_id MEDIUMINT UNSIGNED;

	CALL insert_and_get_file_system (p_uuid, v_file_system_id);

	-- Check if an entry already exists in the table 'file_system_location' with the specified p_uuid and p_pathname.
	SELECT id INTO p_file_system_location_id
		FROM file_system_location
		WHERE file_system_id = v_file_system_id
		AND pathname = p_pathname
	;
	
	-- If it doesn't exist, create it.
	IF p_file_system_location_id IS NULL
	THEN
		INSERT INTO location (id) VALUES ('');
		SELECT LAST_INSERT_ID() INTO v_location_id;

		INSERT INTO file_system_location (location_id, file_system_id, pathname) VALUES (
			v_location_id,
			v_file_system_id,
			p_pathname
		);
		SELECT LAST_INSERT_ID() INTO p_file_system_location_id;
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_file_system_location',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_flac_file //

CREATE PROCEDURE insert_and_get_flac_file -- {{{1

	(
		IN  p_audio_file_id MEDIUMINT UNSIGNED,
		OUT p_flac_file_id  MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_audio_file_id> MEDIUMINT UNSIGNED,
                        OUT <p_flac_file_id>  MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'flac_file' table. Return the id field of the inserted row." -- 2}}}

BEGIN -- {{{2
	-- Check if an entry already exists in the table 'flac_file' with the specified audio_file_id. 
	SELECT id INTO p_flac_file_id
		FROM flac_file
		WHERE audio_file_id = p_audio_file_id;
	
	-- If it doesn't exist, create it.
	IF p_flac_file_id IS NULL
	THEN
		INSERT INTO flac_file (id, audio_file_id) VALUES (
			'',
			p_audio_file_id
		);
		SELECT LAST_INSERT_ID() INTO p_flac_file_id;
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_flac_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_host //

CREATE PROCEDURE insert_and_get_host -- {{{1

	(
		IN  p_name    VARCHAR(256),
		OUT p_host_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_name>    MEDIUMINT UNSIGNED,
                        OUT <p_host_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'host' table. Return the id field of the inserted row." -- 2}}}

BEGIN -- {{{2
	-- Check if an entry already exists in the table 'host' with the specified name. 
	SELECT id INTO p_host_id FROM host WHERE name = p_name;
	
	-- If it doesn't exist, create it.
	IF p_host_id IS NULL
	THEN
		INSERT INTO host (id, name) VALUES ( '', p_name);
		SELECT LAST_INSERT_ID() INTO p_host_id;
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_host',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_mime_type //

CREATE PROCEDURE insert_and_get_mime_type -- {{{1

	(
		IN  p_type_descriptor VARCHAR(75),
		OUT p_mime_type_id    MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_type_descriptor> VARCHAR(75),
                        OUT <p_mime_type_id>    MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry into the 'mime_type' table. Return the id field of the inserted row in the 'mime_type' table." -- 2}}}

BEGIN -- {{{2

	-- Check if an entry already exists in the table 'mime_type' with the specified p_type_descriptor. 
	SELECT id INTO p_mime_type_id
		FROM mime_type
		WHERE type_descriptor = p_type_descriptor;
	
	-- If it doesn't exist, create it.
	IF p_mime_type_id IS NULL
	THEN
		INSERT INTO mime_type (type_descriptor) VALUES (p_type_descriptor);
		SELECT LAST_INSERT_ID() INTO p_mime_type_id;
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_mime_type',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_mount_point //

CREATE PROCEDURE insert_and_get_mount_point -- {{{1

	(
		IN  p_hostname         VARCHAR(256),
		IN  p_pathname         VARCHAR(256),
		IN  p_file_system_uuid CHAR(36),
		OUT p_mount_point_id   MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_hostname>         VARCHAR(256),
                        IN  <p_pathname>         VARCHAR(256),
                        IN  <p_file_system_uuid> MEDIUMINT UNSIGNED,
                        OUT <p_mount_point_id>   MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'mount_point' and 'l_file_system_to_mount_point' tables. Return the id field of the inserted row." -- 2}}}

BEGIN -- {{{2
	DECLARE v_file_system_id MEDIUMINT UNSIGNED;
	DECLARE v_host_id        MEDIUMINT UNSIGNED;

	CALL insert_and_get_host(p_hostname, v_host_id);

	-- Check if an entry already exists in the table 'mount_point'. 
	SELECT id INTO p_mount_point_id
		FROM mount_point
		WHERE host_id = v_host_id
		AND pathname = p_pathname
	;
	
	-- If it doesn't exist, create it.
	IF p_mount_point_id IS NULL
	THEN
		INSERT INTO mount_point (id, host_id, pathname) VALUES (
			'',
			v_host_id,
			p_pathname
		);
		SELECT LAST_INSERT_ID() INTO p_mount_point_id;

		CALL insert_and_get_file_system (p_file_system_uuid, v_file_system_id);
		CALL link_file_system_to_mount_point (v_file_system_id, p_mount_point_id);
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_mount_point',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_software //

CREATE PROCEDURE insert_and_get_software -- {{{1

	(
		IN  p_name             VARCHAR(256),
		IN  p_software_version VARCHAR(256),
		OUT p_software_id      MEDIUMINT UNSIGNED
	)

COMMENT  -- {{{2
                     "Parameters:
                        IN  <p_name>             MEDIUMINT UNSIGNED,
                        IN  <p_software_version> MEDIUMINT UNSIGNED,
                        OUT <p_software_id>      MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'software' table. Return the id field of the inserted row." -- 2}}}

BEGIN -- {{{2
	-- Check if an entry already exists in the table 'software' with the specified <p_name> and <p_software_version> values. 
	SELECT id INTO p_software_id
		FROM software
		WHERE name = p_name
		AND   version = p_software_version
	;
	
	-- If it doesn't exist, create it.
	IF p_software_id IS NULL
	THEN
		INSERT INTO software (id, name, version) VALUES ( '', p_name, p_software_version);
		SELECT LAST_INSERT_ID() INTO p_software_id;
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_software',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_and_get_software_session //

CREATE PROCEDURE insert_and_get_software_session -- {{{1

	(
		IN  p_software_id         MEDIUMINT UNSIGNED,
		IN  p_software_options    VARCHAR(256),
		OUT p_software_session_id MEDIUMINT UNSIGNED
	)

COMMENT  -- {{{2
                     "Parameters:
                        IN  <p_software_id>         MEDIUMINT UNSIGNED,
                        IN  <p_software_options>    VARCHAR(256),
                        OUT <p_software_session_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'software_session' table. Return the id field of the inserted row." -- 2}}}

BEGIN -- {{{2

	INSERT INTO software_session (id, software_id, software_options) VALUES (
		'',
		p_software_id,
		p_software_options
	);
	SELECT LAST_INSERT_ID() INTO p_software_session_id;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_and_get_software_session',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_archive_file //

CREATE PROCEDURE insert_archive_file -- {{{1

	(
		IN p_file_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_file_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'archive_file' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_archive_file_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_archive_file (p_file_id, v_archive_file_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_archive_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_binary_file //

CREATE PROCEDURE insert_binary_file -- {{{1

	(
		IN p_file_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_file_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'binary_file' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_binary_file_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_binary_file (p_file_id, v_binary_file_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_binary_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_archive_location //

CREATE PROCEDURE insert_archive_location -- {{{1

	(
		IN  p_archive_file_id MEDIUMINT UNSIGNED,
		IN  p_pathname        VARCHAR(256)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_archive_file_id> MEDIUMINT UNSIGNED,
                        IN <p_pathname>        VARCHAR(256).
                      Description:
                        Insert an entry in the 'location' and 'archive_location' tables." -- 2}}}

BEGIN -- {{{2
	DECLARE v_archive_location_id MEDIUMINT;
	CALL insert_and_get_archive_location (p_hostname, p_pathname, v_host_location_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_archive_location',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_audio_file //

CREATE PROCEDURE insert_audio_file -- {{{1

	(
		IN  p_file_id       MEDIUMINT UNSIGNED,
		IN  p_recording_gid CHAR(36)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_file_id>       MEDIUMINT UNSIGNED,
                        IN <p_recording_gid> CHAR(36).
                      Description:
                        Insert an entry in the 'audio_file', 'recording' and 'l_audio_file_to_recording' tables." -- 2}}}

BEGIN -- {{{2
	DECLARE v_audio_file_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_audio_file (p_file_id, p_recording_gid, v_audio_file_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_audio_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_file //

CREATE PROCEDURE insert_file -- {{{1

	(
		IN  p_fs_uuid  VARCHAR(256),
		IN  p_pathname VARCHAR(256),
		IN  p_mimetype VARCHAR(256),
		IN  p_sha1     CHAR(40),
		IN  p_fsize    BIGINT UNSIGNED,
		IN  p_mtime    INT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_fs_uuid>  VARCHAR(256),
                        IN <p_pathname> VARCHAR(256),
                        IN <p_mimetype> VARCHAR(256),
                        IN <p_sha1>     CHAR(40),
                        IN <p_fsize>    BIGINT UNSIGNED,
                        IN <p_mtime>    INT UNSIGNED.
                      Description:
                        Process file's metadata and do the pertinent insertions." -- 2}}}

BEGIN -- {{{2
	DECLARE v_file_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_file (p_fs_uuid, p_pathname, p_mimetype, p_sha1, p_fsize, p_mtime, v_file_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_file_system //

CREATE PROCEDURE insert_file_system -- {{{1

	(
		IN  p_uuid CHAR(36)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN p_uuid CHAR(36).
                      Description:
                        Insert an entry in the 'file_system'." -- 2}}}

BEGIN -- {{{2
	DECLARE v_file_system_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_file_system (p_uuid);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_file_system',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_file_system_location //

CREATE PROCEDURE insert_file_system_location -- {{{1

	(
		IN  p_uuid      CHAR(36),
		IN  p_pathname  VARCHAR(256)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN p_uuid     CHAR(36),
                        IN p_pathname VARCHAR(256).
                      Description:
                        Insert an entry into the 'location' and 'file_system_location' tables." -- 2}}}

BEGIN -- {{{2
	DECLARE v_file_system_location_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_file_system (p_uuid, p_pathname, v_file_system_location_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_file_system_location',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_flac_file //

CREATE PROCEDURE insert_flac_file -- {{{1

	(
		IN p_audio_file_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters: 
                        IN <p_audio_file_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'flac_file' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_flac_file_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_flac_file (p_audio_file_id, v_flac_file_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_flac_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_flac_metadata_entry //

CREATE PROCEDURE insert_flac_metadata_entry -- {{{1

	(
		IN p_flac_file_id MEDIUMINT UNSIGNED,
		IN p_type         VARCHAR(256),
		IN p_column1      VARCHAR(256),
		IN p_column2      VARCHAR(256)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_flac_file_id> MEDIUMINT UNSIGNED,
                        IN <p_type>           VARCHAR(256),
                        IN <p_column1>      VARCHAR(256),
                        IN <p_column2>      VARCHAR(256).
                      Description:
                        Insert an entry in the 'flac_metadata_entry' table." -- 2}}}

BEGIN -- {{{2

	DECLARE v_flac_metadata_entry_id MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'flac_metadata_entry' with the specified paramaters.
	SELECT id INTO v_flac_metadata_entry_id
		FROM flac_metadata_entry
		WHERE type = p_type
		AND column1 = p_column1
		AND column2 = p_column2;
	
	-- If it doesn't exist, create it.
	IF v_flac_metadata_entry_id IS NULL
	THEN
		INSERT INTO flac_metadata_entry (type, column1, column2) VALUES (
			p_type,
			p_column1,
			p_column2
		);
		SELECT LAST_INSERT_ID() INTO v_flac_metadata_entry_id;
		CALL link_flac_file_to_metadata_entry(p_flac_file_id, v_flac_metadata_entry_id);
	END IF;

END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_flac_metadata_entry',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_mime_type //

CREATE PROCEDURE insert_mime_type -- {{{1

	(
		IN  p_type_descriptor VARCHAR(75)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN p_type_descriptor VARCHAR(75).
                      Description:
                        Insert an entry in the 'mime_type'." -- 2}}}

BEGIN -- {{{2
	DECLARE v_mime_type_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_mime_type (p_type_descriptor);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_mime_type',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_mount_point //

CREATE PROCEDURE insert_mount_point -- {{{1

	(
		IN  p_hostname         VARCHAR(256),
		IN  p_pathname         VARCHAR(256),
		IN  p_file_system_uuid CHAR(36)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_hostname>         VARCHAR(256),
                        IN <p_pathname>         VARCHAR(256),
                        IN <p_file_system_uuid> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'mount_point' and 'l_file_system_to_mount_point' tables." -- 2}}}

BEGIN -- {{{2
	DECLARE v_mount_point_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_mount_point (p_hostname, p_pathname, p_file_system_uuid, v_mount_point_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_mount_point',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_software //

CREATE PROCEDURE insert_software -- {{{1

	(
		IN  p_software_name    VARCHAR(256),
		IN  p_software_version VARCHAR(256)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_name> MEDIUMINT UNSIGNED,
                        IN <p_software_version> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'software' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_software_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_software (p_software_name, p_software_version, v_software_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_software',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS insert_software_session //

CREATE PROCEDURE insert_software_session -- {{{1

	(
		IN  p_software_id      MEDIUMINT UNSIGNED,
		IN  p_software_options VARCHAR(256)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN  <p_software_id>         MEDIUMINT UNSIGNED,
                        IN  <p_software_options>    VARCHAR(256),
                        OUT <p_software_session_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'software_session' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_software_session_id MEDIUMINT UNSIGNED;
	CALL insert_and_get_software_session (v_software_id, p_software_options, v_software_session_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'insert_software_session',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS link_audio_file_to_recording //

CREATE PROCEDURE link_audio_file_to_recording -- {{{1

	(
		IN p_audio_file_id MEDIUMINT UNSIGNED,
		IN p_recording_id  MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_audio_file_id> MEDIUMINT UNSIGNED,
                        IN <p_recording_id>  MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'l_audio_file_to_recording' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_count MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_audio_file_to_recording' with the specified p_audio_file_id and p_recording_id. 
	SELECT COUNT(*) INTO v_count
		FROM l_audio_file_to_recording
		WHERE audio_file_id = p_audio_file_id
		AND recording_id = p_recording_id;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		INSERT INTO l_audio_file_to_recording (audio_file_id, recording_id) VALUES ( 
			p_audio_file_id,
			p_recording_id
		);
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'link_audio_file_to_recording',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS link_dvd_to_software_session //

CREATE PROCEDURE link_dvd_to_software_session -- {{{1

	(
		IN p_dvd_id             MEDIUMINT UNSIGNED,
		IN p_software_session_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_dvd_id>             MEDIUMINT UNSIGNED,
                        IN <p_software_session_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'l_dvd_to_software_session' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_count MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_dvd_to_software_session' with the specified <p_dvd_id> and <p_software_session_id>. 
	SELECT COUNT(*) INTO v_count
		FROM l_dvd_to_software_session
		WHERE dvd_id = p_dvd_id
		AND software_session_id = p_software_session_id;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		INSERT INTO l_dvd_to_software_session (dvd_id, software_session_id) VALUES ( 
			p_dvd_id,
			p_software_session_id
		);
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'link_dvd_to_software_session',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS link_file_to_location //

CREATE PROCEDURE link_file_to_location -- {{{1

	(
		IN p_file_id     MEDIUMINT UNSIGNED,
		IN p_location_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_file_id>     MEDIUMINT UNSIGNED,
                        IN <p_location_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'l_file_to_location' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_count MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_file_to_location' with the specified p_file_id and p_location_id. 
	SELECT COUNT(*) INTO v_count
		FROM l_file_to_location
		WHERE file_id = p_file_id
		AND location_id = p_location_id;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		INSERT INTO l_file_to_location (file_id, location_id) VALUES ( 
			p_file_id,
			p_location_id
		);
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'link_file_to_location',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS link_file_to_software_session //

CREATE PROCEDURE link_file_to_software_session -- {{{1

	(
		IN p_file_id             MEDIUMINT UNSIGNED,
		IN p_software_session_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_file_id>             MEDIUMINT UNSIGNED,
                        IN <p_software_session_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'l_file_to_software_session' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_count MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_file_to_software_session' with the specified <p_file_id> and <p_software_session_id>. 
	SELECT COUNT(*) INTO v_count
		FROM l_file_to_software_session
		WHERE file_id = p_file_id
		AND software_session_id = p_software_session_id;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		INSERT INTO l_file_to_software_session (file_id, software_session_id) VALUES ( 
			p_file_id,
			p_software_session_id
		);
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'link_file_to_software_session',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS link_file_system_to_data_storage_device //

CREATE PROCEDURE link_file_system_to_data_storage_device -- {{{1

	(
		IN p_file_system_id         MEDIUMINT UNSIGNED,
		IN p_data_storage_device_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_file_system_id>         MEDIUMINT UNSIGNED,
                        IN <p_data_storage_device_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'l_file_system_to_data_storage_device' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_count MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_file_system_to_data_storage_device' with the specified p_file_system_id and p_data_storage_device_id. 
	SELECT COUNT(*) INTO v_count
		FROM l_file_system_to_data_storage_device
		WHERE file_system_id = p_file_system_id
		AND data_storage_device_id = p_data_storage_device_id;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		INSERT INTO l_file_system_to_data_storage_device (file_system_id, data_storage_device_id) VALUES ( 
			p_file_system_id,
			p_data_storage_device_id
		);
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'link_file_system_to_data_storage_device',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS link_file_system_to_mount_point //

CREATE PROCEDURE link_file_system_to_mount_point -- {{{1

	(
		IN p_file_system_id MEDIUMINT UNSIGNED,
		IN p_mount_point_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_file_system_id> MEDIUMINT UNSIGNED,
                        IN <p_mount_point_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'l_file_system_to_mount_point' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_count MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_file_system_to_mount_point' with the specified p_file_system_id and p_mount_point_id. 
	SELECT COUNT(*) INTO v_count
		FROM l_file_system_to_mount_point
		WHERE file_system_id = p_file_system_id
		AND mount_point_id = p_mount_point_id
	;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		INSERT INTO l_file_system_to_mount_point (file_system_id, mount_point_id) VALUES ( 
			p_file_system_id,
			p_mount_point_id
		);

	-- If it does, update it.
	ELSE
		UPDATE l_file_system_to_mount_point
			SET mount_point_id = p_mount_point_id
			WHERE file_system_id = p_file_system_id
		;
		
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'link_file_system_to_mount_point',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS link_flac_file_to_metadata_entry //

CREATE PROCEDURE link_flac_file_to_metadata_entry -- {{{1

	(
		IN p_flac_file_id           MEDIUMINT UNSIGNED,
		IN p_flac_metadata_entry_id MEDIUMINT UNSIGNED
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_flac_file_id>           MEDIUMINT UNSIGNED,
                        IN <p_flac_metadata_entry_id> MEDIUMINT UNSIGNED.
                      Description:
                        Insert an entry in the 'l_flac_file_to_metadata_entry' table." -- 2}}}

BEGIN -- {{{2
	DECLARE v_count MEDIUMINT UNSIGNED;

	-- Check if an entry already exists in the table 'l_flac_file_to_metadata_entry' with the specified p_flac_file_id and p_flac_metadata_entry_id. 
	SELECT COUNT(*) INTO v_count
		FROM l_flac_file_to_metadata_entry
		WHERE flac_file_id = p_flac_file_id
		AND flac_metadata_entry_id = p_flac_metadata_entry_id;
	
	-- If it doesn't exist, create it.
	IF v_count = 0
	THEN
		INSERT INTO l_flac_file_to_metadata_entry (flac_file_id, flac_metadata_entry_id) VALUES ( 
			p_flac_file_id,
			p_flac_metadata_entry_id
		);
	END IF;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'link_flac_file_to_metadata_entry',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS process_archived_file //

CREATE PROCEDURE process_archived_file -- {{{1

	(
		IN p_archive_sha1 CHAR(40),
		IN p_file_sha1    CHAR(40),
		IN p_pathname     VARCHAR(256)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_archive_sha1> CHAR(40),
                        IN <p_file_sha1> CHAR(40),
                        IN <p_pathname> VARCHAR(256).
                      Description:
                        Process a file that it is being archived inside another file, and do the pertinent insertions." -- 2}}}

BEGIN -- {{{2
	DECLARE v_archive_file_id     MEDIUMINT UNSIGNED;
	DECLARE v_archive_location_id MEDIUMINT UNSIGNED;
	DECLARE v_file_id             MEDIUMINT UNSIGNED;
	DECLARE v_location_id         MEDIUMINT UNSIGNED;

	-- Insert an entry in the 'archive_location' table.
	SELECT archive_file.id INTO v_archive_file_id
		FROM archive_file
		INNER JOIN file
			ON archive_file.file_id = file.id
		WHERE file.sha1 = p_archive_sha1
	;
	CALL insert_and_get_archive_location (v_archive_file_id, p_pathname, v_archive_location_id);

	-- Insert and entry in the 'l_file_to_location' table.
	SELECT id INTO v_file_id
		FROM file
		WHERE sha1 = p_file_sha1
	;
	SELECT location_id INTO v_location_id
		FROM archive_location
		WHERE id = v_archive_location_id
	;
	CALL link_file_to_location (v_file_id, v_location_id);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'process_archived_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS process_output_file //

CREATE PROCEDURE process_output_file -- {{{1

	(
		IN p_software_name    VARCHAR(256),
		IN p_software_version VARCHAR(256),
		IN p_software_options VARCHAR(256),
		IN p_sha1             CHAR(40)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_software_name>    VARCHAR(256),
                        IN <p_software_version> VARCHAR(256),
                        IN <p_software_options> VARCHAR(256),
                        IN <p_sha1>             CHAR(40).
                      Description:
                        Insert an entry in the 'l_file_to_software_session' table. Insertions might been done into 'software' and 'software session' as
                        well." -- 2}}}

BEGIN -- {{{2
	DECLARE v_file_id             MEDIUMINT UNSIGNED;
	DECLARE v_software_id         MEDIUMINT UNSIGNED;
	DECLARE v_software_session_id MEDIUMINT UNSIGNED;

	SELECT id INTO v_file_id
		FROM file
		WHERE sha1 = p_sha1
	;

	CALL insert_and_get_software (p_software_name, p_software_version, v_software_id);

	CALL insert_and_get_software_session (v_software_id, p_software_options, v_software_session_id);

	INSERT INTO l_file_to_software_session (file_id, software_session_id) VALUES ( 
		v_file_id,
		v_software_session_id
	);
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'process_output_file',
	'user'
) // -- 1}}}

DROP PROCEDURE IF EXISTS select_ancestor //

CREATE PROCEDURE select_ancestor -- {{{1

	(
		IN p_tree       VARCHAR(256),
		IN p_father     VARCHAR(256),
		IN p_descendant VARCHAR(256)
	)

COMMENT -- {{{2
                     "Parameters:
                        IN <p_tree>       VARCHAR(256),
                        IN <p_father>     VARCHAR(256),
                        IN <p_descendant> VARCHAR(256),
                      Description:
                        Find in the tree named <p_tree> a node which is a child of that asociated to the tag or mime_type <p_father> and, if it
                        is not asociated to the tag or mime-type <p_descendant>, is and ancestor of one that it is." -- 2}}}

BEGIN -- {{{2
	DECLARE v_ancestor VARCHAR(256);
	CALL get_ancestor (p_tree, p_father, p_descendant, v_ancestor);
	SELECT v_ancestor;
END; // -- 2}}} 1}}}

-- Insert an entry into the temporal 'procedures' table. -- {{{1
INSERT INTO procedures (id, name, level) VALUES (
	'',
	'select_ancestor',
	'user'
) // -- 1}}}

delimiter ;
